#include<iostream>
#include<stdlib.h>
using namespace std;
class Queue
{
    private:
        int rear,front;
        int size;
        int *store;
    public:
    Queue(int size)
    {
            this->size=size;
            rear=front=-1;
            store=new int[size];
    }
    ~Queue()
    {
        delete[] store;
    }
    int isFull()
    {
            if((front==-1 && rear==(size-1) ) || (rear+1)%size==front)
            {
                    return 1;
            }
                return 0;
    }
    int isEmpty()
    {
        if(rear == -1)
        {
            return 1;
        }
            return 0;
    }
    void Enqueue(int data)
    {
        if(!isFull())
        {
            rear=(rear+1)%size;
            store[rear]=data;
            if(front==-1)
            {
                front=0;
            }
        }
    }
    int Dequeue()
    {

        {
        int data;
         data=store[front];
        front=(front+1)%size;
        if(front==rear+1)
        {
            front=rear=-1;
        }
        return data;
    }}
};

int main()
{
    int d;
    cin>>d;
    string cmd;
    Queue q(d);
    while(1)
    {
        cin>>cmd;
        if(cmd=="exit")
            {
                exit(0);
            }
        if(cmd=="enque")
            {
                int data;
                cin>>data;
                if(!q.isFull())
                {
                    q.Enqueue(data);

                }
            else
                {
                    cout<<"FULL"<<endl;
                }
            }
            if(cmd=="deque")
            {
                if(!q.isEmpty())
                    {
                    cout<<q.Dequeue()<<endl;
                    }
                else
                    {
                    cout<<"EMPTY"<<endl;
                    }
            }
    }

    return 0;
    }

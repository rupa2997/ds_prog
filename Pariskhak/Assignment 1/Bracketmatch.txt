#include<iostream>
#include<cstring>
using namespace std;

class Stack
{
    private:
        int top,size;
        char *store;
    public:
        Stack()
        {
            top=-1;
            size=0;
        }
        Stack(int size)
        {   top=-1;
            this->size=size;
            store=new char[size];
        }
        ~Stack()
        {
            delete[] store;
        }
        int isEmpty()
        {
            if(top==-1)
            {
            return 1;
            }
            return 0;
        }
        int isFull()
        {
            if(top==(size-1))
            {
                return 1;
            }
                return 0;
        }
        void Push(char str)
        {
            if(!isFull())
            {     top++;
                store[top]=str;
             
                }
        }
        void Pop()
        {
            if(!isEmpty())
                {  
                    top--;
                                  
                }
        }
        char tp()
        {
            return store[top];
        }
        void topreset(int x)
        {   
            top=-1;
        }
    };

int main()
{
    int n;
    cin>>n; 
    char str[20];
    Stack s(20);
  
    for(int i=0;i<n;i++)
   {   
        cin>>str;
        
        for(int j=0;j<=strlen(str);j++)
        {   
            
           if(str[j]=='(' || str[j]=='{' || str[j]=='[')
                {
                    s.Push(str[j]);
                    continue;
                }
          
            else if(str[j]==')' || str[j]=='}' || str[j]==']' || str[j]=='\0')
                        {
                            if(str[j]==')' && s.tp()=='(')
                                {
                                        s.Pop();
                                        continue;
                                }
                            
                            if(str[j]=='}' && s.tp()=='{')
                                {
                                        s.Pop();
                                        continue;
                                }
                            
                            if(str[j]==']' && s.tp()=='[')
                                {
                                        s.Pop();
                                        continue;
                                }
                            if(str[j]=='\0' && (s.isEmpty()))
                                {
                                    
                                    cout<<"TRUE"<<endl;
                                    break;
                                }
                           
                                else
                                {  
                                        cout<<"FALSE"<<endl;
                                        s.topreset(-1);
                                        break;        
                                 }
                        
                                
                        
                         }   
            
        
            
        }
        
    }  
return 0;
}